# .github/workflows/deploy.yml

name: Spring Boot CI/CD to EC2

on:
  push:
    branches:
      - main # main 브랜치에 푸시될 때 워크플로우 실행

env:
  JAVA_VERSION: '21' # 나의 EC2에 설치된 JDK 버전과 동일하게 설정 (예: '17', '21')
  EC2_HOST: '3.107.23.106' # <-- 나의 EC2 퍼블릭 IP 주소 (변경될 수 있으니 주의!)
  EC2_USER: 'ubuntu' # <-- EC2 접속 사용자 이름 (예: ubuntu, ec2-user)
  EC2_KEY_PATH: '~/.ssh/id_rsa' # <-- GitHub Actions에서 사용할 SSH 키 파일 경로 (아래에서 설정할 것)
  JAR_FILE_NAME: 'awsserverapi-0.0.1-SNAPSHOT.jar' # <-- 아츠리아의 빌드된 JAR 파일 이름
  PROJECT_DIR: '/home/ubuntu/backend' # <-- EC2 내 백엔드 프로젝트 폴더 경로

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest # 워크플로우를 실행할 가상 환경 (최신 우분투)

    steps:
      # 1. 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4 # GitHub Repository의 코드를 워크플로우 환경으로 가져옴

      # 2. Java 환경 설정
      - name: Set up JDK ${{ env.JAVA_VERSION }}
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin' # OpenJDK 배포판 
          cache: 'maven' # Maven 의존성 캐싱 (빌드 속도 향상)

      # 3. Spring Boot 프로젝트 빌드
      - name: Build with Maven
        run: mvn clean install -DskipTests # 테스트를 건너뛰고 빌드 (CI 단계에서 테스트를 별도로 실행할 수도 있음)

      # 4. SSH 키 설정 (GitHub Actions Secrets 사용)
      - name: Set up SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }} # <-- GitHub Secrets에서 SSH_PRIVATE_KEY 가져옴

      # 5. JAR 파일 EC2로 전송 및 백엔드 재시작
      - name: Deploy to EC2
        run: |
          # 5-1. 기존 프로세스 종료
          ssh -o StrictHostKeyChecking=no ${{ env.EC2_USER }}@${{ env.EC2_HOST }} "
            ps -ef | grep ${JAR_FILE_NAME} | grep -v grep | awk '{print \$2}' | xargs kill -9 || true
          "
          # 5-2. JAR 파일 전송
          scp -o StrictHostKeyChecking=no ./target/${{ env.JAR_FILE_NAME }} ${{ env.EC2_USER }}@${{ env.EC2_HOST }}:${{ env.PROJECT_DIR }}/
          
          # 5-3. 새로운 JAR 파일로 백엔드 실행 (prod 프로파일 활성화, 로그 파일 지정)
          ssh -o StrictHostKeyChecking=no ${{ env.EC2_USER }}@${{ env.EC2_HOST }} "
            nohup java -jar ${{ env.PROJECT_DIR }}/${{ env.JAR_FILE_NAME }} --spring.profiles.active=prod > ${{ env.PROJECT_DIR }}/my-backend-log.log 2>&1 &
          "
